{"remainingRequest":"D:\\project\\blb-consumer-frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\blb-consumer-frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\project\\blb-consumer-frontend\\src\\repository\\index.js","dependencies":[{"path":"D:\\project\\blb-consumer-frontend\\src\\repository\\index.js","mtime":1606571741841},{"path":"D:\\project\\blb-consumer-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\blb-consumer-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\project\\blb-consumer-frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/project/blb-consumer-frontend/src/repository/index.js"],"names":["axios","Repository","get","data","username","password","post","params","categoryId","shopId","tagId","page","size","put","productId","specId","quantity","orderId","payId","delete","location","deliveryId","fromData","method","url","headers","userInfo","oldPassword","newPassword"],"mappings":"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","sourcesContent":["import axios from './config'\r\n\r\nclass Repository {\r\n  async getShopCategory () {\r\n    const data = await axios.get('/category/1')\r\n    return data.data\r\n  }\r\n\r\n  async getConsumerInfo () {\r\n    const data = await axios.get('/info')\r\n    return data.data\r\n  }\r\n\r\n  async login (username, password) {\r\n    const data = await axios.post(`/login?username=${username}&password=${password}`)\r\n    return data.data\r\n  }\r\n\r\n  async register (params) {\r\n    const data = await axios.post('/register', params)\r\n    return data.data\r\n  }\r\n\r\n  async getShopByCategory (params) {\r\n    const data = await axios.get(`/category/${params.categoryId}/shop`, {\r\n      params\r\n    })\r\n    return data.data\r\n  }\r\n\r\n  async getShopInfo (shopId) {\r\n    const data = await axios.get('/shop/info/' + shopId)\r\n    return data.data\r\n  }\r\n\r\n  async getShopProductCategory (shopId) {\r\n    const data = await axios.get(`/shop/${shopId}/category/`)\r\n    return data.data\r\n  }\r\n\r\n  async getProductList (shopId, categoryId) {\r\n    const data = await axios.get(`/shop/${shopId}/${categoryId}/product/`)\r\n    return data.data\r\n  }\r\n\r\n  async getShopEval (shopId) {\r\n    const data = await axios.get(`/shop/${shopId}/evaluation`)\r\n    return data.data\r\n  }\r\n\r\n  async getShopEvalList (params) {\r\n    const data = await axios.get(`/shop/${params.shopId}/evaluation/list?tagId=${params.tagId}&page=${params.page}&size=${params.size}`)\r\n    return data.data\r\n  }\r\n\r\n  async addProductIntoCart (params) {\r\n    const data = await axios.put(`/shop/${params.shopId}/cart/${params.productId}/${params.specId}?quantity=${params.quantity}`)\r\n    return data.data\r\n  }\r\n\r\n  async getCartProductList (shopId) {\r\n    const data = await axios.get('/shop/' + shopId + '/cart')\r\n    return data.data\r\n  }\r\n\r\n  async getConsumerDefaultDelivery () {\r\n    const data = await axios.get('/delivery/default')\r\n    return data.data\r\n  }\r\n\r\n  async makeOrder (params) {\r\n    const data = await axios.post('/shop/order', params)\r\n    return data.data\r\n  }\r\n\r\n  async generatePay (orderId) {\r\n    const data = await axios.post('/pay/order/' + orderId)\r\n    return data.data\r\n  }\r\n\r\n  async getPayUrl (payId) {\r\n    const data = await axios.get('/pay/' + payId)\r\n    return data.data\r\n  }\r\n\r\n  async getPayStatus (payId) {\r\n    const data = await axios.get('/pay/status/' + payId)\r\n    return data.data\r\n  }\r\n\r\n  async clearCart (shopId) {\r\n    const data = await axios.delete('/shop/' + shopId + '/cart')\r\n    return data.data\r\n  }\r\n\r\n  async getOrderList (page, size) {\r\n    const data = await axios.get('/shop/order', {\r\n      params: {\r\n        page, size\r\n      }\r\n    })\r\n    return data.data\r\n  }\r\n\r\n  async getOrderDetail (orderId) {\r\n    const data = await axios.get('/shop/order/' + orderId)\r\n    return data.data\r\n  }\r\n\r\n  async getNearByShop (location) {\r\n    const data = await axios.get('/shop/vicinity', {\r\n      params: { location }\r\n    })\r\n    return data.data\r\n  }\r\n\r\n  async searchShop (params) {\r\n    const data = await axios.get('/shop/search', {\r\n      params\r\n    })\r\n    return data.data\r\n  }\r\n\r\n  async getDeliveryList () {\r\n    const data = await axios.get('/delivery')\r\n    return data.data\r\n  }\r\n\r\n  async addDelivery (params) {\r\n    const data = await axios.post('/delivery', params)\r\n    return data.data\r\n  }\r\n\r\n  async updateDelivery (params) {\r\n    const data = await axios.put('/delivery/' + params.deliveryId, params)\r\n    return data.data\r\n  }\r\n\r\n  async deleteDelivery (deliveryId) {\r\n    const data = await axios.delete('/delivery/' + deliveryId)\r\n    return data.data\r\n  }\r\n\r\n  async uploadAvatar (fromData) {\r\n    const data = await axios({\r\n      method: 'post',\r\n      url: '/avatar',\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n      data: fromData\r\n    })\r\n    return data.data\r\n  }\r\n\r\n  async updateUserInfo (userInfo) {\r\n    const data = await axios.post('/info', userInfo)\r\n    return data.data\r\n  }\r\n\r\n  async updatePassword (oldPassword, newPassword) {\r\n    const data = await axios.post(`/info/password?oldPassword=${oldPassword}&newPassword=${newPassword}`)\r\n    return data.data\r\n  }\r\n}\r\n\r\nexport default new Repository()\r\n"]}]}