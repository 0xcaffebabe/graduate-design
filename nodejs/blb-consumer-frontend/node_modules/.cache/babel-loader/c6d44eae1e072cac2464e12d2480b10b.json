{"remainingRequest":"D:\\project\\blb-consumer-frontend\\node_modules\\thread-loader\\dist\\cjs.js!D:\\project\\blb-consumer-frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\blb-consumer-frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\project\\blb-consumer-frontend\\src\\service\\ConsumerService.js","dependencies":[{"path":"D:\\project\\blb-consumer-frontend\\src\\service\\ConsumerService.js","mtime":1606745178664},{"path":"D:\\project\\blb-consumer-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\blb-consumer-frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\blb-consumer-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\project\\blb-consumer-frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/project/blb-consumer-frontend/src/service/ConsumerService.js"],"names":["repository","storageService","ConsumerService","token","getItem","getConsumerInfo","data","success","consumerInfo","Error","msg","username","password","login","putItem","params","register","getConsumerDefaultDelivery","remove","fileList","length","formData","FormData","append","uploadAvatar","userInfo","updateUserInfo","old","newPassword","updatePassword"],"mappings":";;;;AAAA,OAAOA,UAAP,MAAuB,eAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;IACMC,e;;;;;;;AACJ;;;;;;;;AAEQC,gBAAAA,K,GAAQF,cAAc,CAACG,OAAf,CAAuB,OAAvB,C;;oBACTD,K;;;;;iDACI,K;;;;uBAEUH,UAAU,CAACK,eAAX,E;;;AAAbC,gBAAAA,I;iDACCA,IAAI,CAACC,O;;;;;;;;;;;;;;;QAGd;;;;;;;;;;;qBAEM,KAAKC,Y;;;;;kDACA,KAAKA,Y;;;;uBAEKR,UAAU,CAACK,eAAX,E;;;AAAbC,gBAAAA,I;;oBACDA,IAAI,CAACC,O;;;;;sBACF,IAAIE,KAAJ,CAAU,cAAcH,IAAI,CAACI,GAA7B,C;;;kDAEDJ,IAAI,CAACA,I;;;;;;;;;;;;;;;QAGd;;;;;6FACaK,Q,EAAUC,Q;;;;;;;uBACFZ,UAAU,CAACa,KAAX,CAAiBF,QAAjB,EAA2BC,QAA3B,C;;;AAAbN,gBAAAA,I;;oBACDA,IAAI,CAACC,O;;;;;sBACF,IAAIE,KAAJ,CAAU,UAAUH,IAAI,CAACI,GAAzB,C;;;AAERT,gBAAAA,cAAc,CAACa,OAAf,CAAuB,OAAvB,EAAgCR,IAAI,CAACA,IAAL,CAAUH,KAA1C;kDACOG,IAAI,CAACA,I;;;;;;;;;;;;;;;QAGd;;;;;gGACgBS,M;;;;;;;uBACKf,UAAU,CAACgB,QAAX,CAAoBD,MAApB,C;;;AAAbT,gBAAAA,I;;oBACDA,IAAI,CAACC,O;;;;;sBACF,IAAIE,KAAJ,CAAU,UAAUH,IAAI,CAACI,GAAzB,C;;;kDAEDJ,IAAI,CAACA,I;;;;;;;;;;;;;;;QAGd;;;;;;;;;;;;uBAEqBN,UAAU,CAACiB,0BAAX,E;;;AAAbX,gBAAAA,I;;oBACDA,IAAI,CAACC,O;;;;;sBACF,IAAIE,KAAJ,CAAU,gBAAgBH,IAAI,CAACI,GAA/B,C;;;kDAEDJ,IAAI,CAACA,I;;;;;;;;;;;;;;;QAGd;;;;6BACU;AACRL,MAAAA,cAAc,CAACiB,MAAf,CAAsB,OAAtB;AACD;;;;oGAEmBC,Q;;;;;;sBACd,CAACA,QAAD,IAAaA,QAAQ,CAACC,MAAT,KAAoB,C;;;;;sBAC7B,IAAIX,KAAJ,CAAU,eAAV,C;;;AAEFY,gBAAAA,Q,GAAW,IAAIC,QAAJ,E;AACjBD,gBAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBJ,QAAQ,CAAC,CAAD,CAAhC;;uBACmBnB,UAAU,CAACwB,YAAX,CAAwBH,QAAxB,C;;;AAAbf,gBAAAA,I;;oBACDA,IAAI,CAACC,O;;;;;sBACF,IAAIE,KAAJ,CAAU,YAAYH,IAAI,CAACI,GAA3B,C;;;kDAEDJ,IAAI,CAACA,I;;;;;;;;;;;;;;;;;;;sGAGQmB,Q;;;;;;;uBACDzB,UAAU,CAAC0B,cAAX,CAA0BD,QAA1B,C;;;AAAbnB,gBAAAA,I;;oBACDA,IAAI,CAACC,O;;;;;sBACF,IAAIE,KAAJ,CAAU,cAAcH,IAAI,CAACI,GAA7B,C;;;kDAED,I;;;;;;;;;;;;;;;;;;;sGAGaiB,G,EAAKC,W;;;;;;;uBACN5B,UAAU,CAAC6B,cAAX,CAA0BF,GAA1B,EAA+BC,WAA/B,C;;;AAAbtB,gBAAAA,I;;oBACDA,IAAI,CAACC,O;;;;;sBACF,IAAIE,KAAJ,CAAU,YAAYH,IAAI,CAACI,GAA3B,C;;;kDAED,I;;;;;;;;;;;;;;;;;;;;;AAGX,eAAe,IAAIR,eAAJ,EAAf","sourcesContent":["import repository from '../repository'\r\nimport storageService from './StorageService'\r\nclass ConsumerService {\r\n  // 判断是否登录\r\n  async isLogin () {\r\n    const token = storageService.getItem('token')\r\n    if (!token) {\r\n      return false\r\n    }\r\n    const data = await repository.getConsumerInfo()\r\n    return data.success\r\n  }\r\n\r\n  // 获取当前登录用户信息（会对信息进行缓存）\r\n  async getConsumerInfo () {\r\n    if (this.consumerInfo) {\r\n      return this.consumerInfo\r\n    }\r\n    const data = await repository.getConsumerInfo()\r\n    if (!data.success) {\r\n      throw new Error('获取用户信息失败:' + data.msg)\r\n    }\r\n    return data.data\r\n  }\r\n\r\n  // 进行登录\r\n  async login (username, password) {\r\n    const data = await repository.login(username, password)\r\n    if (!data.success) {\r\n      throw new Error('登录失败:' + data.msg)\r\n    }\r\n    storageService.putItem('token', data.data.token)\r\n    return data.data\r\n  }\r\n\r\n  // 进行注册\r\n  async register (params) {\r\n    const data = await repository.register(params)\r\n    if (!data.success) {\r\n      throw new Error('注册失败:' + data.msg)\r\n    }\r\n    return data.data\r\n  }\r\n\r\n  // 获取当前登录用户默认收货信息\r\n  async getDefaultDelivery () {\r\n    const data = await repository.getConsumerDefaultDelivery()\r\n    if (!data.success) {\r\n      throw new Error('获取默认收货信息失败:' + data.msg)\r\n    }\r\n    return data.data\r\n  }\r\n\r\n  // 注销\r\n  logout () {\r\n    storageService.remove('token')\r\n  }\r\n\r\n  async uploadAvatar (fileList) {\r\n    if (!fileList || fileList.length === 0) {\r\n      throw new Error('上传头像失败:没有选择图片')\r\n    }\r\n    const formData = new FormData()\r\n    formData.append('file', fileList[0])\r\n    const data = await repository.uploadAvatar(formData)\r\n    if (!data.success) {\r\n      throw new Error('上传头像失败:' + data.msg)\r\n    }\r\n    return data.data\r\n  }\r\n\r\n  async updateUserInfo (userInfo) {\r\n    const data = await repository.updateUserInfo(userInfo)\r\n    if (!data.success) {\r\n      throw new Error('保存用户信息失败:' + data.msg)\r\n    }\r\n    return true\r\n  }\r\n\r\n  async updatePassword (old, newPassword) {\r\n    const data = await repository.updatePassword(old, newPassword)\r\n    if (!data.success) {\r\n      throw new Error('修改密码失败:' + data.msg)\r\n    }\r\n    return true\r\n  }\r\n}\r\nexport default new ConsumerService()\r\n"]}]}